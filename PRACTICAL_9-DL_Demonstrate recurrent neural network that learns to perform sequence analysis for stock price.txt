PRACTICAL 9:

Practical 9: Demonstrate recurrent neural network that learns to perform sequence analysis for stock price.(google stock price). 

Code: 
import yfinance as yf 
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
from sklearn.preprocessing import MinMaxScaler 
import tensorflow as tf 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import SimpleRNN, Dense 
 
# Download Google Stock Price Data 
df = yf.download('GOOG', start='2015-01-01', end='2023-12-31') 
 
df.head() 
 
# Use 'Close' Price for prediction 
data = df['Close'].values.reshape(-1, 1) 
 
# Normalize the data 
scaler = MinMaxScaler(feature_range=(0, 1)) 
data_scaled = scaler.fit_transform(data) 
 
# Create Sequences 
def create_dataset(dataset, time_step=60): 
    X, Y = [], [] 
    for i in range(len(dataset) - time_step - 1): 
        X.append(dataset[i:i+time_step, 0]) 
        Y.append(dataset[i+time_step, 0]) 
    return np.array(X), np.array(Y) 
 
time_step = 60 
X, y = create_dataset(data_scaled, time_step) 
 
# Reshape for RNN Input (samples, timesteps, features) 
X = X.reshape(X.shape[0], X.shape[1], 1) 
 
# Split into Training and Testing 
train_size = int(len(X) * 0.7) 
X_train, X_test = X[:train_size], X[train_size:] 
y_train, y_test = y[:train_size], y[train_size:] 
 
model = Sequential() 
model.add(SimpleRNN(50, return_sequences=False, 
input_shape=(time_step, 1))) 
model.add(Dense(1)) 
 
model.compile(optimizer='adam', loss='mean_squared_error') 
model.summary() 
 
history = model.fit(X_train, y_train, validation_data=(X_test, 
y_test), epochs=50, batch_size=32, verbose=1) 
 
# Predict Stock Prices 
train_predict = model.predict(X_train) 
test_predict = model.predict(X_test) 
 
# Inverse Transform to get actual values 
train_predict = scaler.inverse_transform(train_predict) 
test_predict = scaler.inverse_transform(test_predict) 
real_y_test = scaler.inverse_transform(y_test.reshape(-1, 1)) 
 
# Plotting 
plt.figure(figsize=(10,6)) 
plt.plot(df['Close'].index[train_size+time_step+1:], real_y_test, 
label="Actual Google Stock Price") 
plt.plot(df['Close'].index[train_size+time_step+1:], test_predict, 
label="Predicted Stock Price") 
plt.xlabel("Date") 
plt.ylabel("Stock Price") 
plt.legend() 
plt.title("Google Stock Price Prediction using RNN") 
plt.show() 
 

Output: 
YF.download() has changed argument auto_adjust default to True 
[*********************100%***********************]  1 of 1 completed 
/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: 
UserWarning: Do not pass an `input_shape`/`input_dim` argument to a 
layer. When using Sequential models, prefer using an `Input(shape)` 
object as the first layer in the model instead. 
  super().__init__(**kwargs) 
Model: "sequential_8" 
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓ 
┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃ 
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩ 
│ simple_rnn (SimpleRNN)          │ (None, 50)             │         2,600 │ 
├─────────────────────────────────┼────────────────────────┼───────────────┤ 
│ dense_18 (Dense)                │ (None, 1)              │            51 │ 
└─────────────────────────────────┴────────────────────────┴───────────────┘ 
 Total params: 2,651 (10.36 KB) 
 Trainable params: 2,651 (10.36 KB) 
 Non-trainable params: 0 (0.00 B) 
Epoch 45/50 
49/49 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step - loss: 8.7001e-05 - val_loss: 0.0048 
Epoch 46/50 
49/49 ━━━━━━━━━━━━━━━━━━━━ 1s 9ms/step - loss: 1.2622e-04 - val_loss: 0.0077 
Epoch 47/50 
49/49 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - loss: 8.5448e-05 - val_loss: 0.0052 
Epoch 48/50 
49/49 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step - loss: 7.4585e-05 - val_loss: 0.0055 
Epoch 49/50 
49/49 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step - loss: 8.8923e-05 - val_loss: 0.0027 
Epoch 50/50 
49/49 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step - loss: 1.1316e-04 - val_loss: 0.0039 
49/49 ━━━━━━━━━━━━━━━━━━━━ 1s 11ms/step 
21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 14ms/step 
