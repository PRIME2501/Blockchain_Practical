# -*- coding: utf-8 -*-
"""DLPractical6RealWorldEg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18XUPrcbOce5PZRpLjQ43WG7mGKN8qaqt
"""

!pip install tensorflow scikit-learn matplotlib pandas

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load Breast Cancer Dataset
data = load_breast_cancer()
X = data.data
print("Original Shape of Data:", X.shape)

# Normalize Data
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

input_dim = X_scaled.shape[1]  # Number of features
encoding_dim = 10  # Encoded representation size

# Encoder
input_layer = Input(shape=(input_dim,))
encoded = Dense(encoding_dim, activation='relu')(input_layer)

# Decoder
decoded = Dense(input_dim, activation='sigmoid')(encoded)

# Autoencoder Model
autoencoder = Model(inputs=input_layer, outputs=decoded)

# Encoder Model
encoder = Model(inputs=input_layer, outputs=encoded)

autoencoder.compile(optimizer='adam', loss='mse')
autoencoder.summary()

history = autoencoder.fit(X_scaled, X_scaled,
                          epochs=100,
                          batch_size=32,
                          validation_split=0.2)

# Encoded Data
encoded_data = encoder.predict(X_scaled)
print("Encoded Data Shape:", encoded_data.shape)

# Reconstructed Data
decoded_data = autoencoder.predict(X_scaled)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.title('Autoencoder Loss Curve')
plt.show()

print("Original Data Sample:\n", X_scaled[0])
print("Reconstructed Data Sample:\n", decoded_data[0])
print("Encoded Data Sample:\n", encoded_data[0])